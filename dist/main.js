(()=>{"use strict";const e=e=>{let t=(e=>{const t=[];for(;t.length<5;){const e=Math.floor(10*Math.random());-1===t.indexOf(e)&&t.push(e)}return t})();function o(e){let t=[];for(let o=0;o<10;o++)t.push([e,o]);return t}let r={carrier:o(t[0]),battleship:o(t[1]),cruiser:o(t[2]),submarine:o(t[3]),destroyer:o(t[4])};return{id:e,get_ships:()=>r,hit:(e,t)=>{let o=e;console.log("Here is the player fgrom hit function",o);let[r,s]=o.grab_position(o,t);return null==r||null==s?(console.log("Doesnt exist!"),!1):(o.remove_piece(r,s),!0)},remove_piece:(e,t)=>{if(r[e].length<=1)return(e=>{delete r[e],console.log("Ship has been deleted since its array is empty.")})(e);const o=r[e].find((e=>JSON.stringify(e)==JSON.stringify(t)));console.log("Here is the position reference, ",o),r[e].splice(o,1),console.log("Here is the updated ship_pieces afterwards:",r)},grab_position:(e,t)=>{let o=e;console.log("From grab position function, this is the position ",t);for(const e in r){let s=r[e].find((e=>JSON.stringify(e)==JSON.stringify(t)));if(null!=s)return console.log(`${o.id} was hit!`),console.log("Here is the property: ",e),[e,s]}return[null,null]},update_ship_array:e=>(r=null,r=e)}};!function(){const t=(()=>{let t=e("player"),o=e("aibot");return{player:t,aibot:o,update_coordinates:function(e,r){e===t.id?t.update_ship_array(r):o.update_ship_array(r)},check_if_ship_hit:function(e){let[r,s,i]=e;console.log("HERE IS THE ID ",r),console.log("HERE IS THE x ",s),console.log("HERE IS THE y ",i),r===t.id?(console.log("Player cell was clicked on."),o.hit(t,[s,i]),console.log("Player ships after everything was updated/deleted",t.get_ships())):r===o.id&&(console.log("Ai bot cell was clicked on."),t.hit(o,[s,i]),console.log("AI bot ships after everything was updated/deleted",o.get_ships()))}}})();let o={},r={};function s(e,t){let o=t;console.log(`This is ${e} ships`,o),console.log("This is the carrier array: ",o.carrier),console.log("This is the battleship array: ",o.battleship),console.log("This is the cruiser array: ",o.cruiser),console.log("This is the submarine array: ",o.submarine),console.log("This is the destroyer array: ",o.destroyer),i(e,"carrier",5,o.carrier),i(e,"battleship",4,o.battleship),i(e,"cruiser",3,o.cruiser),i(e,"submarine",3,o.submarine),i(e,"destroyer",2,o.destroyer)}function i(e,s,i,n){let c=n;const d=Array.from(document.querySelectorAll(`.grid-cell-${e}-board`));let h=c[0][0],u=l();d.forEach((e=>{console.log(h==e.dataset.x)}));let p=d.filter((e=>e.dataset.x==h));console.log(p);let g=Math.ceil(p.length/2);if(console.log("This is found array before split",p),0===u){let t=p.slice(0,g).slice(0,g).slice(0,i);console.log("This is the found array now first half",t),t.forEach((t=>t.className=`grid-cell-${e}-board ${s}`))}else{let t=p.slice(g).slice(`-${i}`);console.log("This is the found array now second half",t),t.forEach((t=>t.className=`grid-cell-${e}-board ${s}`))}console.log("Grab ship coords function",a(e,`${s}`)),e===t.aibot.id?(r[`${s}`]=a(e,`${s}`),console.log("This is the SHIPS from bot DOM now",r)):(o[`${s}`]=a(e,`${s}`),console.log("This is the SHIPS from DOM now",o))}const l=()=>Math.floor(2*Math.random()),a=(e,t)=>{let o=[];return Array.from(document.querySelectorAll(`.grid-cell-${e}-board`)).forEach((e=>{e.classList.contains(t)&&o.push([e.dataset.x,e.dataset.y])})),o};function n(e){const t=document.querySelector(`.${e}`);for(let o=0;o<10;o++){let r=o;for(let o=0;o<10;o++){const s=document.createElement("div");s.className=`grid-cell-${e}`,s.id=`${e.split("-")[0]}`,s.setAttribute("data-x",r),s.setAttribute("data-y",o),s.style.border="1px solid black",s.addEventListener("click",(t=>{s.textContent="X",c([t.target.id,t.target.dataset.x,t.target.dataset.y]),render_hits(e)})),t.appendChild(s)}}}function c(e){let[o,r,s]=e;return t.check_if_ship_hit([o,r,s])}n(`${t.player.id}-board`),n(`${t.aibot.id}-board`),s(t.player.id,t.player.get_ships()),s(t.aibot.id,t.aibot.get_ships()),t.update_coordinates(t.player.id,o),t.update_coordinates(t.aibot.id,r)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,