(()=>{"use strict";const e=e=>{let t=(e=>{const t=[];for(;t.length<5;){const e=Math.floor(10*Math.random());-1===t.indexOf(e)&&t.push(e)}return t})();function o(e){let t=[];for(let o=0;o<10;o++)t.push([e,o]);return t}let n={carrier:o(t[0]),battleship:o(t[1]),cruiser:o(t[2]),submarine:o(t[3]),destroyer:o(t[4])};return{id:e,get_ships:()=>n,hit:(e,t)=>{let o=e;console.log("Here is the player fgrom hit function",o);let[n,s]=o.grab_position(o,t);return null==n||null==s?(console.log("Doesnt exist!"),!1):(o.remove_piece(n,s),!0)},remove_piece:(e,t)=>{if(n[e].length<=1)return(e=>{delete n[e],console.log("Ship has been deleted since its array is empty.")})(e);const o=n[e].findIndex((e=>JSON.stringify(e)==JSON.stringify(t)));console.log("Here is the position reference, ",o),n[e].splice(o,1),console.log("Here is the updated ship_pieces afterwards:",n)},grab_position:(e,t)=>{let o=e;console.log("From grab position function, this is the position ",t);for(const e in n){let s=n[e].find((e=>JSON.stringify(e)==JSON.stringify(t)));if(null!=s)return console.log(`${o.id} was hit!`),console.log("Here is the property: ",e),[e,s]}return[null,null]},update_ship_array:e=>(n=null,n=e)}};!function(){let t=!0;const o=(()=>{let t=e("player"),o=e("aibot");function n(e,t){const o=e,n=t;let s=o.get_ships(),r=n.get_ships(),i=0,l=0;for(const e in s)e&&i++;for(const e in r)e&&l++;return i<1&&l>1?(console.log(`We have a winner. Its ${n.id}`),n.id):i>1&&l<1&&(console.log(`We have a winner. Its ${o.id}`),o.id)}return{player:t,aibot:o,update_coordinates:function(e,n){e===t.id?t.update_ship_array(n):o.update_ship_array(n)},check_if_ship_hit:function(e){let[s,r,i]=e;console.log("HERE IS THE ID ",s),console.log("HERE IS THE x ",r),console.log("HERE IS THE y ",i),s===t.id?(console.log("Player cell was clicked on."),o.hit(t,[r,i]),console.log("Player ships after everything was updated/deleted",t.get_ships())):s===o.id&&(console.log("Ai bot cell was clicked on."),t.hit(o,[r,i]),console.log("AI bot ships after everything was updated/deleted",o.get_ships())),n(t,o)},check_winner:n}})();let n={},s={};function r(e,t){let o=t;console.log(`This is ${e} ships`,o),console.log("This is the carrier array: ",o.carrier),console.log("This is the battleship array: ",o.battleship),console.log("This is the cruiser array: ",o.cruiser),console.log("This is the submarine array: ",o.submarine),console.log("This is the destroyer array: ",o.destroyer),i(e,"carrier",5,o.carrier),i(e,"battleship",4,o.battleship),i(e,"cruiser",3,o.cruiser),i(e,"submarine",3,o.submarine),i(e,"destroyer",2,o.destroyer)}function i(e,t,r,i){let c=i;const d=Array.from(document.querySelectorAll(`.grid-cell-${e}-board`));let h=c[0][0],u=l();d.forEach((e=>{console.log(h==e.dataset.x)}));let p=d.filter((e=>e.dataset.x==h));console.log(p);let y=Math.ceil(p.length/2);if(console.log("This is found array before split",p),0===u){let o=p.slice(0,y).slice(0,y).slice(0,r);console.log("This is the found array now first half",o),o.forEach((o=>o.className=`grid-cell-${e}-board ${t}`))}else{let o=p.slice(y).slice(`-${r}`);console.log("This is the found array now second half",o),o.forEach((o=>o.className=`grid-cell-${e}-board ${t}`))}console.log("Grab ship coords function",a(e,`${t}`)),e===o.aibot.id?(s[`${t}`]=a(e,`${t}`),console.log("This is the SHIPS from bot DOM now",s)):(n[`${t}`]=a(e,`${t}`),console.log("This is the SHIPS from DOM now",n))}const l=()=>Math.floor(2*Math.random()),a=(e,t)=>{let o=[];return Array.from(document.querySelectorAll(`.grid-cell-${e}-board`)).forEach((e=>{e.classList.contains(t)&&o.push([e.dataset.x,e.dataset.y])})),o};function c(e){const t=document.querySelector(`.${e}`);for(let o=0;o<10;o++){let n=o;for(let o=0;o<10;o++){const s=document.createElement("div");s.className=`grid-cell-${e}`,s.id=`${e.split("-")[0]}`,s.setAttribute("data-x",n),s.setAttribute("data-y",o),s.style.border="1px solid black",s.addEventListener("click",(t=>{s.textContent="X",(s.classList.contains("cruiser")&&"X"==s.textContent||s.classList.contains("battleship")&&"X"==s.textContent||s.classList.contains("submarine")&&"X"==s.textContent||s.classList.contains("destroyer")&&"X"==s.textContent||s.classList.contains("carrier")&&"X"==s.textContent)&&(d([t.target.id,t.target.dataset.x,t.target.dataset.y]),s.className=`grid-cell-${e.split("-")[0]}-board hit`,p()),u()})),s.addEventListener("input",(t=>{console.log("Input is fired here!"),(s.classList.contains("cruiser")&&"X"==s.textContent||s.classList.contains("battleship")&&"X"==s.textContent||s.classList.contains("submarine")&&"X"==s.textContent||s.classList.contains("destroyer")&&"X"==s.textContent||s.classList.contains("carrier")&&"X"==s.textContent)&&(d([t.target.id,t.target.dataset.x,t.target.dataset.y]),s.className=`grid-cell-${e.split("-")[0]}-board hit`,p())})),t.appendChild(s)}}}function d(e){let[t,n,s]=e;return o.check_if_ship_hit([t,n,s])}function h(){let e=document.querySelector(".aibot-board");!1!==t||"visible"!==e.style["pointer-events"]?!0!==t||"none"!==e.style["pointer-events"]||(e.style["pointer-events"]="visible"):e.style["pointer-events"]="none"}function u(){const e=document.querySelector(".winner");return!0===t?(console.log("PLAYERS TURN SINCE THIS IS PLAYER TURN: ",t),e.textContent="Players turn!",h(),void(t=!1)):(console.log("BOTS TURN SINCE THIS IS PLAYER_TURN: ",t),e.textContent="Bots turn!",setTimeout((()=>function(){let e=Math.floor(99*Math.random()),o=document.querySelector(".player-board"),n=o.children[e];for(;"X"===n.textContent;)console.log("Spot was already taken. Retrying for another empty cell."),e=Math.floor(100*Math.random()),n=o.children[e];return n.textContent="X",t=!0,function(){let e=document.querySelector(".player-board"),t=Array.from(e.children);console.log("Executing render bot hit function"),t.forEach((e=>{(e.classList.contains("cruiser")&&"X"==e.textContent||e.classList.contains("battleship")&&"X"==e.textContent||e.classList.contains("submarine")&&"X"==e.textContent||e.classList.contains("destroyer")&&"X"==e.textContent||e.classList.contains("carrier")&&"X"==e.textContent)&&(console.log("Bot actually hit a ship!"),d([e.id,e.dataset.x,e.dataset.y]),e.className=`grid-cell-${e.id.split("-")[0]}-board hit`,p())}))}(),u()}()),1e3),void h())}function p(){let e=document.querySelector(".winner"),t=document.querySelector(".declare-winner"),n=document.querySelector(".player-board"),s=document.querySelector(".aibot-board"),r=s.children,i=o.check_winner(o.player,o.aibot);("player"===i||"aibot"===i)&&(e.textContent="",e.style.display="flex",t.textContent="Player wins!",n.style["pointer-events"]="none",s.style["pointer-events"]="none",r.forEach((e=>e.style["pointer-events"]="none;")))}c(`${o.player.id}-board`),c(`${o.aibot.id}-board`),r(o.player.id,o.player.get_ships()),r(o.aibot.id,o.aibot.get_ships()),u(),o.update_coordinates(o.player.id,n),o.update_coordinates(o.aibot.id,s)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,